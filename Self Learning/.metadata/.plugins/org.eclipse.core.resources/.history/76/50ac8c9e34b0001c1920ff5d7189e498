package SortingAlgorithmsandFundamentalDataStructures;

public class mm {

	static void merge(int[] a, int l, int mid, int r) {
		int i = l;
		int j = mid + 1;
		int k = l;
		int[] b = new int[a.length];
		while (i <= mid && j <= r) {
			if (a[i] < a[j]) {
				b[k++] = a[i++];
			} else {
				b[k++] = a[j++];
			}
		}

		while (i <= mid) {
			b[k++] = a[i++];
		}

		while (j <= r) {
			b[k++] = a[j++];
		}

		for (int k1 = l; k1 <= r; k1++) {
			a[k] = b[k];
		}
	}

	static void mergesort(int[] a, int l, int r) {
		if (l < r) {
			int mid = (l + r) / 2;

			mergesort(a, l, mid);
			mergesort(a, mid + 1, r);
			merge(a, l, mid, r);

		}
	}

	public static void main(String[] args) {
		int arr[] = { 6, 3, 9, 5, 2, 8 };
		mergesort(arr, 0, arr.length - 1);

		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
	}
}
