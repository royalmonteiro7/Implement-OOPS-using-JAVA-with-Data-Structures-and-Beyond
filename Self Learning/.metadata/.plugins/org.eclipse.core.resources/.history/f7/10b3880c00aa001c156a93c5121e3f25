package SortingAlgorithmsandFundamentalDataStructures;

public class MergeSort {
	public static void conquer(int[] arr, int start, int mid, int end) {
		int merged[] = new int[end - start + 1];

		int idx1 = start;
		int idx2 = mid + 1;
		int x = 0;

		while (idx1 <= mid && idx2 <= end) {
			if (arr[idx1] <= arr[idx2]) {
				merged[x] = arr[idx1];
				x++;
				idx1++;
			} else {
				merged[x] = arr[idx2];
				x++;
				idx2++;
			}
		}
		while (idx1 <= mid) {
			merged[x] = arr[idx1];
			x++;
			idx1++;
		}
		while (idx2 <= mid) {
			merged[x] = arr[idx2];
			x++;
			idx2++;
		}
		for (int i = 0, j = 0; i < merged.length; i++, j++) {
			arr[j] = merged[x];
		}
	}

	public static void divide(int[] arr, int start, int end) {
		if (start >= end) {
			return;
		}

		int mid = (end - start) / 2 + start;
		divide(arr, start, mid);
		divide(arr, mid + 1, end);
		conquer(arr, start, mid, end);
	}

	public static void main(String[] args) {
		int arr[] = { 6, 3, 9, 5, 2, 8 };
		divide(arr, 0, arr.length - 1);
		// print
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
	}
}